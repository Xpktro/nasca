{"version":3,"sources":["js/NascaScale.js","js/MidiHandler.js","js/application.js"],"names":["NascaScale","fundamentalFrequency","fundamentalNote","pitchBendRangeCents","intervals","n","m","frequency","preciseNote","Math","log","note","round","cents","pitchBend","pow","pitchbend","relativeNote","degree","mod","length","octave","floor","addCents","console","frequencyToMIDI","MIDIHandler","inputDeviceSelector","outputDeviceSelector","noteDisplay","frequencyDisplay","fundamentalNoteButton","scale","onchange","useSelectedDevices","inputDevice","outputDevice","fundamentalNoteSet","onclick","setFundamentalNote","navigator","requestMIDIAccess","then","access","accessGranted","catch","error","midiAccess","onstatechange","updateDevices","innerHTML","inputs","forEach","entry","option","document","createElement","value","id","name","selected","appendChild","outputs","selectedInputDevice","selectedOutputDevice","get","device","onmidimessage","e","onMIDIMessage","midiNote","midiEvent","data","includes","toString","noteOn","noteOff","midiToFrequency","toFixed","noteToNasca","finePitchBend","coarsePitchBend","channel","send","message","element","getElementById","join","scrollTop","scrollHeight","window","onload","handler"],"mappings":"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","file":"application.65cabb93.map","sourceRoot":"..","sourcesContent":["class NascaScale {\n  constructor({fundamentalFrequency = 440, fundamentalNote = 69, pitchBendRangeCents = 200} = {}) {\n    this.fundamentalFrequency = fundamentalFrequency;\n    this.fundamentalNote = fundamentalNote;\n    this.pitchBendRangeCents = pitchBendRangeCents;\n    this.intervals = [\n      0,\n      68.0,\n      138.0,\n      211.0,\n      288.0,\n      368.0,\n      452.0,\n      540.0,\n      633.0,\n      731.0,\n      835.0,\n      946.0,\n      1064.0,\n      // 1191.0,\n    ];\n  }\n\n  mod(n, m) {\n    return ((n % m) + m) % m;\n  }\n\n  frequencyToMIDI(frequency) {\n    const preciseNote = Math.log(frequency/440.0) / Math.log(2) * 12 + 69;\n    const note = Math.round(preciseNote);\n    const cents = Math.log(preciseNote/note) / Math.log(2) * 1200;\n    const pitchBend = Math.round(8192 * cents/this.pitchBendRangeCents) + 8192;\n    return [note, pitchBend];\n  }\n\n  // def _frequency_to_note_and_pitch_bend(self, frequency):\n  //   base_frequency = self.tuning_frequency / (2.0 ** (self.tuning_note / 12.0))\n  //   precise_note = 12.0 * math.log(frequency / base_frequency, 2)\n  //   note = round(precise_note)\n  //   pb = round(819200.0 * (precise_note - note) / ((100.0 * self.pitch_bend_range_semitones) + self.pitch_bend_range_cents)) + 8192\n  //   return int(note), int(pb)\n\n  // Adds cents to given frequency\n  addCents(frequency, cents) {\n    return frequency * Math.pow(2, cents/1200);\n  }\n\n  noteToNasca(note, pitchbend) {\n    const relativeNote = note - this.fundamentalNote;\n    const degree = this.mod(relativeNote, this.intervals.length);\n    const octave = Math.floor(relativeNote / this.intervals.length);\n\n    const frequency = this.addCents(this.fundamentalFrequency * Math.pow(2, octave), this.intervals[degree]);\n    console.log(frequency);\n    return this.frequencyToMIDI(frequency);\n  }\n}\n\nexport default NascaScale;","import NascaScale from './NascaScale';\n\nclass MIDIHandler {\n  constructor(inputDeviceSelector, outputDeviceSelector, noteDisplay, frequencyDisplay, fundamentalNoteButton, log = console.log) {\n    this.scale = new NascaScale();\n    this.inputDeviceSelector = inputDeviceSelector;\n    this.inputDeviceSelector.onchange = () => this.useSelectedDevices();\n    this.outputDeviceSelector = outputDeviceSelector;\n    this.outputDeviceSelector.onchange = () => this.useSelectedDevices();\n    this.noteDisplay = noteDisplay;\n    this.frequencyDisplay = frequencyDisplay;\n    this.inputDevice = {};\n    this.outputDevice = {};\n    this.log = log;\n    this.fundamentalNoteSet = false;\n    fundamentalNoteButton.onclick = () => this.setFundamentalNote();\n    this.log('Requesting Browser MIDI access...');\n    navigator\n      .requestMIDIAccess()\n      .then((access) => this.accessGranted(access))\n      .catch((error) => log('Could not get browser MIDI access. Error: ', error));\n  }\n\n  accessGranted(midiAccess) {\n    this.log('MIDI access granted.')\n    this.access = midiAccess;\n    this.access.onstatechange = () => this.log('Updating device list.') || this.updateDevices() || this.useSelectedDevices();\n    this.updateDevices();\n    this.useSelectedDevices();\n  }\n\n  updateDevices() {\n    this.inputDeviceSelector.innerHTML = '';\n    this.access.inputs.forEach((entry) => {\n      const option = document.createElement('option');\n      option.value = entry.id;\n      option.innerHTML = entry.name;\n      if(entry.id === this.inputDevice.id) option.selected = true;\n      this.inputDeviceSelector.appendChild(option);\n    });\n\n    this.outputDeviceSelector.innerHTML = '';\n    this.access.outputs.forEach((entry) => {\n      const option = document.createElement('option');\n      option.value = entry.id;\n      option.innerHTML = entry.name;\n      if(entry.id === this.outputDevice.id) option.selected = true;\n      this.outputDeviceSelector.appendChild(option);\n    });\n  }\n\n  useSelectedDevices() {\n    const selectedInputDevice = this.inputDeviceSelector.value;\n    const selectedOutputDevice = this.outputDeviceSelector.value;\n    this.inputDevice = this.access.inputs.get(selectedInputDevice);\n    this.outputDevice = this.access.outputs.get(selectedOutputDevice);\n    this.access.inputs.forEach((device) => device.onmidimessage = null);\n    this.inputDevice.onmidimessage = (e) => this.onMIDIMessage(e);\n  }\n\n  midiToFrequency(midiNote) {\n    return Math.pow(2, (midiNote - 69) / 12) * 440;\n  }\n\n  setFundamentalNote() {\n    if(this.fundamentalNoteSet) return;\n    this.fundamentalNoteSet = true;\n    this.log('Press the note key you want to set as the new fundamental tone.');\n  }\n\n  // def note_on(self, frequency):\n  //     note, pitch_bend = self._frequency_to_note_and_pitch_bend(frequency)\n  //     channel = self._get_channel()\n  //     fine_pitch_bend = pitch_bend & 127\n  //     corse_pitch_bend = (pitch_bend >> 7) & 127\n  //     #set channel pitch bend\n  //     self._write(0xE0+channel,fine_pitch_bend,corse_pitch_bend)\n  //     #play note\n  //     self._write(0x90+channel,note,self.velocity)\n  //     return NoteOn(channel, note, pitch_bend, frequency)\n\n  onMIDIMessage(midiEvent) {\n    if(\n      // Ignore pitch bend range changes\n      (midiEvent.data[0] & 0xB0) === 0xB0 && [6, 38].includes(midiEvent.data[1])\n      ||\n      // Ignore pitch bend messages\n      ((midiEvent.data[0] & 0xE0) === 0xE0)\n    ) {\n      return;\n    }\n\n    console.log('data:', midiEvent.data, 'hex:', midiEvent.data[0].toString(16), midiEvent.data[1].toString(16), midiEvent.data[2].toString(16));\n    const noteOn = (midiEvent.data[0] & 0x90) === 0x90;\n    const noteOff = (midiEvent.data[0] & 0x80) === 0x80;\n\n    if(noteOn && this.fundamentalNoteSet) {\n      this.fundamentalNoteSet = false;\n      this.scale.fundamentalNote = midiEvent.data[1];\n      this.scale.fundamentalFrequency = this.midiToFrequency(midiEvent.data[1]);\n      this.noteDisplay.innerHTML = this.scale.fundamentalNote;\n      this.frequencyDisplay.innerHTML = this.scale.fundamentalFrequency.toFixed(2);\n      this.log('Fundamental note set:', this.scale.fundamentalNote, `(${ this.scale.fundamentalFrequency.toFixed(2)}Hz)`);\n    } else if(noteOn || noteOff) {\n      const [note, pitchbend] = this.scale.noteToNasca(midiEvent.data[1]);\n\n      // Only set pitch bend on Note On message\n      if(noteOn) {\n        const finePitchBend = pitchbend & 127;\n        const coarsePitchBend = (pitchbend >> 7) & 127;\n        const channel = midiEvent.data[0] & 15;\n      // Send channel pitch bend\n        this.outputDevice.send([0xE0 + channel, finePitchBend, coarsePitchBend]);\n      }\n\n      // Replace with computed note\n      this.outputDevice.send([midiEvent.data[0], note, midiEvent.data[2]])\n    } else {\n      this.outputDevice.send(midiEvent.data);\n    }\n  }\n}\n\nexport default MIDIHandler;","import MIDIHandler from './MidiHandler';\n\nconst log = (...message) => {\n  var element = document.getElementById('logs');\n  element.innerHTML += message.join(' ') + '\\n';\n  element.scrollTop = element.scrollHeight;\n}\n\nwindow.onload = () => {\n  window.handler = new MIDIHandler(\n    document.getElementById('input-devices'),\n    document.getElementById('output-devices'),\n    document.getElementById('note'),\n    document.getElementById('frequency'),\n    document.getElementById('set-note'),\n    log\n  );\n}"]}