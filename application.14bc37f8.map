{"version":3,"sources":["js/NascaScale.js","js/MidiHandler.js","js/application.js"],"names":["NascaScale","fundamentalFrequency","fundamentalNote","pitchBendRangeCents","intervals","n","m","frequency","preciseNote","Math","log","note","round","cents","pow","pitchbend","relativeNote","degree","mod","length","octave","floor","addCents","frequencyToMIDI","MIDIHandler","inputDeviceSelector","outputDeviceSelector","noteDisplay","frequencyDisplay","fundamentalNoteButton","console","scale","onchange","useSelectedDevices","inputDevice","outputDevice","fundamentalNoteSet","onclick","setFundamentalNote","requestMIDIAccess","then","access","accessGranted","catch","error","midiAccess","onstatechange","updateDevices","innerHTML","inputs","forEach","entry","option","document","createElement","value","id","name","selected","appendChild","outputs","selectedInputDevice","selectedOutputDevice","get","device","onmidimessage","e","onMIDIMessage","midiNote","midiEvent","data","includes","toString","noteOn","noteOff","midiToFrequency","toFixed","noteToNasca","finePitchBend","coarsePitchBend","channel","send","message","element","getElementById","join","scrollTop","scrollHeight","window","onload","handler"],"mappings":";AA0DeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCA1DTA,IAAAA,EAAAA,WAC4F,SAAA,IAAJ,IAAA,EAAA,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAA/EC,EAAAA,EAAAA,qBAAAA,OAAuB,IAAA,EAAA,IAA4D,EAAvDC,EAAAA,EAAAA,gBAAAA,OAAkB,IAAA,EAAA,GAAqC,EAAjCC,EAAAA,EAAAA,oBAAAA,OAAsB,IAAA,EAAA,IAAW,EAAA,EAAA,KAAA,GACzFF,KAAAA,qBAAuBA,EACvBC,KAAAA,gBAAkBA,EAClBC,KAAAA,oBAAsBA,EACtBC,KAAAA,UAAY,CACf,EACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAwCSJ,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,MAnCTK,MAAAA,SAAAA,EAAGC,GACE,OAAED,EAAIC,EAAKA,GAAKA,IAkCZN,CAAAA,IAAAA,kBA/BGO,MAAAA,SAAAA,GACRC,IAAAA,EAAcC,KAAKC,IAAIH,EAAU,KAASE,KAAKC,IAAI,GAAK,GAAK,GAC7DC,EAAOF,KAAKG,MAAMJ,GAClBK,EAAQJ,KAAKC,IAAIF,EAAYG,GAAQF,KAAKC,IAAI,GAAK,KAElD,MAAA,CAACC,EADUF,KAAKG,MAAM,KAAOC,EAAM,KAAKV,qBAAuB,QA2B3DH,CAAAA,IAAAA,WAfJO,MAAAA,SAAAA,EAAWM,GACXN,OAAAA,EAAYE,KAAKK,IAAI,EAAGD,EAAM,QAc1Bb,CAAAA,IAAAA,cAXDW,MAAAA,SAAAA,EAAMI,GACVC,IAAAA,EAAeL,EAAO,KAAKT,gBAC3Be,EAAS,KAAKC,IAAIF,EAAc,KAAKZ,UAAUe,QAC/CC,EAASX,KAAKY,MAAML,EAAe,KAAKZ,UAAUe,QAElDZ,EAAY,KAAKe,SAAS,KAAKrB,qBAAuBQ,KAAKK,IAAI,EAAGM,GAAS,KAAKhB,UAAUa,IAEzF,OADCP,QAAAA,IAAIH,GACL,KAAKgB,gBAAgBhB,OAIjBP,EA1DTA,GA0DSA,QAAAA,QAAAA;;ACiEAwB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,IAAAA,EAAAA,WAAAA,OAAAA,SAAAA,EAAAA,GAAAA,GAAAA,MAAAA,QAAAA,GAAAA,OAAAA,EAAAA,GAAAA,OAAAA,YAAAA,OAAAA,GAAAA,OAAAA,SAAAA,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA,EAAAA,KAAAA,EAAAA,QAAAA,GAAAA,EAAAA,SAAAA,GAAAA,GAAAA,IAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,QAAAA,KAAAA,GAAAA,EAAAA,QAAAA,EAAAA,SAAAA,QAAAA,GAAAA,EAAAA,MAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,MAAAA,IAAAA,UAAAA,yDAAAA,GAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GA3Hf,EAAA,QAAA,gBA2HeA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAzHTA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,EAAqBC,EAAsBC,EAAaC,EAAkBC,GAA0C,IAAA,EAAA,KAAnBnB,EAAMoB,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,QAAQpB,IAAK,EAAA,KAAA,GACzHqB,KAAAA,MAAQ,IAAI/B,EAAJ,QACRyB,KAAAA,oBAAsBA,EACtBA,KAAAA,oBAAoBO,SAAW,WAAM,OAAA,EAAKC,sBAC1CP,KAAAA,qBAAuBA,EACvBA,KAAAA,qBAAqBM,SAAW,WAAM,OAAA,EAAKC,sBAC3CN,KAAAA,YAAcA,EACdC,KAAAA,iBAAmBA,EACnBM,KAAAA,YAAc,GACdC,KAAAA,aAAe,GACfzB,KAAAA,IAAMA,EACN0B,KAAAA,oBAAqB,EACJC,EAAAA,QAAU,WAAM,OAAA,EAAKC,sBACtC5B,KAAAA,IAAI,qCAEN6B,UAAAA,oBACAC,KAAK,SAACC,GAAW,OAAA,EAAKC,cAAcD,KACpCE,MAAM,SAACC,GAAUlC,OAAAA,EAAI,6CAA8CkC,KAuG3DpB,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,gBApGCqB,MAAAA,SAAAA,GAAY,IAAA,EAAA,KACnBnC,KAAAA,IAAI,wBACJ+B,KAAAA,OAASI,EACTJ,KAAAA,OAAOK,cAAgB,WAAM,OAAA,EAAKpC,IAAI,0BAA4B,EAAKqC,iBAAmB,EAAKd,sBAC/Fc,KAAAA,gBACAd,KAAAA,uBA+FMT,CAAAA,IAAAA,gBA5FG,MAAA,WAAA,IAAA,EAAA,KACTC,KAAAA,oBAAoBuB,UAAY,GAChCP,KAAAA,OAAOQ,OAAOC,QAAQ,SAACC,GACpBC,IAAAA,EAASC,SAASC,cAAc,UAC/BC,EAAAA,MAAQJ,EAAMK,GACdR,EAAAA,UAAYG,EAAMM,KACtBN,EAAMK,KAAO,EAAKtB,YAAYsB,KAAIJ,EAAOM,UAAW,GAClDjC,EAAAA,oBAAoBkC,YAAYP,KAGlC1B,KAAAA,qBAAqBsB,UAAY,GACjCP,KAAAA,OAAOmB,QAAQV,QAAQ,SAACC,GACrBC,IAAAA,EAASC,SAASC,cAAc,UAC/BC,EAAAA,MAAQJ,EAAMK,GACdR,EAAAA,UAAYG,EAAMM,KACtBN,EAAMK,KAAO,EAAKrB,aAAaqB,KAAIJ,EAAOM,UAAW,GACnDhC,EAAAA,qBAAqBiC,YAAYP,OA4E7B5B,CAAAA,IAAAA,qBAxEQ,MAAA,WAAA,IAAA,EAAA,KACbqC,EAAsB,KAAKpC,oBAAoB8B,MAC/CO,EAAuB,KAAKpC,qBAAqB6B,MAClDrB,KAAAA,YAAc,KAAKO,OAAOQ,OAAOc,IAAIF,GACrC1B,KAAAA,aAAe,KAAKM,OAAOmB,QAAQG,IAAID,GACvCrB,KAAAA,OAAOQ,OAAOC,QAAQ,SAACc,GAAWA,OAAAA,EAAOC,cAAgB,OACzD/B,KAAAA,YAAY+B,cAAgB,SAACC,GAAM,OAAA,EAAKC,cAAcD,MAkEhD1C,CAAAA,IAAAA,kBA/DG4C,MAAAA,SAAAA,GACP3D,OAAoC,IAApCA,KAAKK,IAAI,GAAIsD,EAAW,IAAM,MA8D1B5C,CAAAA,IAAAA,qBA3DQ,MAAA,WAChB,KAAKY,qBACHA,KAAAA,oBAAqB,EACrB1B,KAAAA,IAAI,sEAwDEc,CAAAA,IAAAA,gBA1CC6C,MAAAA,SAAAA,GACZ,KAEiC,MAAV,IAApBA,EAAUC,KAAK,KAAuB,CAAC,EAAG,IAAIC,SAASF,EAAUC,KAAK,KAGvC,MAAV,IAApBD,EAAUC,KAAK,KALnB,CAUQ5D,QAAAA,IAAI,QAAS2D,EAAUC,KAAM,OAAQD,EAAUC,KAAK,GAAGE,SAAS,IAAKH,EAAUC,KAAK,GAAGE,SAAS,IAAKH,EAAUC,KAAK,GAAGE,SAAS,KAClIC,IAAAA,EAAwC,MAAV,IAApBJ,EAAUC,KAAK,IACzBI,EAAyC,MAAV,IAApBL,EAAUC,KAAK,IAE7BG,GAAAA,GAAU,KAAKrC,mBACXA,KAAAA,oBAAqB,EACrBL,KAAAA,MAAM7B,gBAAkBmE,EAAUC,KAAK,GACvCvC,KAAAA,MAAM9B,qBAAuB,KAAK0E,gBAAgBN,EAAUC,KAAK,IACjE3C,KAAAA,YAAYqB,UAAY,KAAKjB,MAAM7B,gBACnC0B,KAAAA,iBAAiBoB,UAAY,KAAKjB,MAAM9B,qBAAqB2E,QAAQ,GACrElE,KAAAA,IAAI,wBAAyB,KAAKqB,MAAM7B,gBAAsB,IAAA,KAAK6B,MAAM9B,qBAAqB2E,QAAQ,GAA3G,YACK,GAAGH,GAAUC,EAAS,CACD,IAAA,EAAA,KAAK3C,MAAM8C,YAAYR,EAAUC,KAAK,IADrC,EAAA,EAAA,EAAA,GACpB3D,EADoB,EAAA,GACdI,EADc,EAAA,GAIxB0D,GAAAA,EAAQ,CACHK,IAAAA,EAA4B,IAAZ/D,EAChBgE,EAAmBhE,GAAa,EAAK,IACrCiE,EAA8B,GAApBX,EAAUC,KAAK,GAE1BnC,KAAAA,aAAa8C,KAAK,CAAC,IAAOD,EAASF,EAAeC,IAIpD5C,KAAAA,aAAa8C,KAAK,CAACZ,EAAUC,KAAK,GAAI3D,EAAM0D,EAAUC,KAAK,UAE3DnC,KAAAA,aAAa8C,KAAKZ,EAAUC,WAKxB9C,EAzHTA,GAyHSA,QAAAA,QAAAA;;ACnHf,aARA,IAAA,EAAA,QAAA,iBAQA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GANA,IAAMd,EAAM,WAAIwE,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAY,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,UAAA,GACtBC,IAAAA,EAAU9B,SAAS+B,eAAe,QAC9BpC,EAAAA,WAAakC,EAAQG,KAAK,KAAO,KACjCC,EAAAA,UAAYH,EAAQI,cAG9BC,OAAOC,OAAS,WACPC,OAAAA,QAAU,IAAIlE,EAAJ,QACf6B,SAAS+B,eAAe,iBACxB/B,SAAS+B,eAAe,kBACxB/B,SAAS+B,eAAe,QACxB/B,SAAS+B,eAAe,aACxB/B,SAAS+B,eAAe,YACxB1E","file":"application.14bc37f8.map","sourceRoot":"..","sourcesContent":["class NascaScale {\n  constructor({fundamentalFrequency = 440, fundamentalNote = 69, pitchBendRangeCents = 200} = {}) {\n    this.fundamentalFrequency = fundamentalFrequency;\n    this.fundamentalNote = fundamentalNote;\n    this.pitchBendRangeCents = pitchBendRangeCents;\n    this.intervals = [\n      0,\n      68.0,\n      138.0,\n      211.0,\n      288.0,\n      368.0,\n      452.0,\n      540.0,\n      633.0,\n      731.0,\n      835.0,\n      946.0,\n      1064.0,\n      // 1191.0,\n    ];\n  }\n\n  mod(n, m) {\n    return ((n % m) + m) % m;\n  }\n\n  frequencyToMIDI(frequency) {\n    const preciseNote = Math.log(frequency/440.0) / Math.log(2) * 12 + 69;\n    const note = Math.round(preciseNote);\n    const cents = Math.log(preciseNote/note) / Math.log(2) * 1200;\n    const pitchBend = Math.round(8192 * cents/this.pitchBendRangeCents) + 8192;\n    return [note, pitchBend];\n  }\n\n  // def _frequency_to_note_and_pitch_bend(self, frequency):\n  //   base_frequency = self.tuning_frequency / (2.0 ** (self.tuning_note / 12.0))\n  //   precise_note = 12.0 * math.log(frequency / base_frequency, 2)\n  //   note = round(precise_note)\n  //   pb = round(819200.0 * (precise_note - note) / ((100.0 * self.pitch_bend_range_semitones) + self.pitch_bend_range_cents)) + 8192\n  //   return int(note), int(pb)\n\n  // Adds cents to given frequency\n  addCents(frequency, cents) {\n    return frequency * Math.pow(2, cents/1200);\n  }\n\n  noteToNasca(note, pitchbend) {\n    const relativeNote = note - this.fundamentalNote;\n    const degree = this.mod(relativeNote, this.intervals.length);\n    const octave = Math.floor(relativeNote / this.intervals.length);\n\n    const frequency = this.addCents(this.fundamentalFrequency * Math.pow(2, octave), this.intervals[degree]);\n    console.log(frequency);\n    return this.frequencyToMIDI(frequency);\n  }\n}\n\nexport default NascaScale;","import NascaScale from './NascaScale';\n\nclass MIDIHandler {\n  constructor(inputDeviceSelector, outputDeviceSelector, noteDisplay, frequencyDisplay, fundamentalNoteButton, log = console.log) {\n    this.scale = new NascaScale();\n    this.inputDeviceSelector = inputDeviceSelector;\n    this.inputDeviceSelector.onchange = () => this.useSelectedDevices();\n    this.outputDeviceSelector = outputDeviceSelector;\n    this.outputDeviceSelector.onchange = () => this.useSelectedDevices();\n    this.noteDisplay = noteDisplay;\n    this.frequencyDisplay = frequencyDisplay;\n    this.inputDevice = {};\n    this.outputDevice = {};\n    this.log = log;\n    this.fundamentalNoteSet = false;\n    fundamentalNoteButton.onclick = () => this.setFundamentalNote();\n    this.log('Requesting Browser MIDI access...');\n    navigator\n      .requestMIDIAccess()\n      .then((access) => this.accessGranted(access))\n      .catch((error) => log('Could not get browser MIDI access. Error: ', error));\n  }\n\n  accessGranted(midiAccess) {\n    this.log('MIDI access granted.')\n    this.access = midiAccess;\n    this.access.onstatechange = () => this.log('Updating device list.') || this.updateDevices() || this.useSelectedDevices();\n    this.updateDevices();\n    this.useSelectedDevices();\n  }\n\n  updateDevices() {\n    this.inputDeviceSelector.innerHTML = '';\n    this.access.inputs.forEach((entry) => {\n      const option = document.createElement('option');\n      option.value = entry.id;\n      option.innerHTML = entry.name;\n      if(entry.id === this.inputDevice.id) option.selected = true;\n      this.inputDeviceSelector.appendChild(option);\n    });\n\n    this.outputDeviceSelector.innerHTML = '';\n    this.access.outputs.forEach((entry) => {\n      const option = document.createElement('option');\n      option.value = entry.id;\n      option.innerHTML = entry.name;\n      if(entry.id === this.outputDevice.id) option.selected = true;\n      this.outputDeviceSelector.appendChild(option);\n    });\n  }\n\n  useSelectedDevices() {\n    const selectedInputDevice = this.inputDeviceSelector.value;\n    const selectedOutputDevice = this.outputDeviceSelector.value;\n    this.inputDevice = this.access.inputs.get(selectedInputDevice);\n    this.outputDevice = this.access.outputs.get(selectedOutputDevice);\n    this.access.inputs.forEach((device) => device.onmidimessage = null);\n    this.inputDevice.onmidimessage = (e) => this.onMIDIMessage(e);\n  }\n\n  midiToFrequency(midiNote) {\n    return Math.pow(2, (midiNote - 69) / 12) * 440;\n  }\n\n  setFundamentalNote() {\n    if(this.fundamentalNoteSet) return;\n    this.fundamentalNoteSet = true;\n    this.log('Press the note key you want to set as the new fundamental tone.');\n  }\n\n  // def note_on(self, frequency):\n  //     note, pitch_bend = self._frequency_to_note_and_pitch_bend(frequency)\n  //     channel = self._get_channel()\n  //     fine_pitch_bend = pitch_bend & 127\n  //     corse_pitch_bend = (pitch_bend >> 7) & 127\n  //     #set channel pitch bend\n  //     self._write(0xE0+channel,fine_pitch_bend,corse_pitch_bend)\n  //     #play note\n  //     self._write(0x90+channel,note,self.velocity)\n  //     return NoteOn(channel, note, pitch_bend, frequency)\n\n  onMIDIMessage(midiEvent) {\n    if(\n      // Ignore pitch bend range changes\n      (midiEvent.data[0] & 0xB0) === 0xB0 && [6, 38].includes(midiEvent.data[1])\n      ||\n      // Ignore pitch bend messages\n      ((midiEvent.data[0] & 0xE0) === 0xE0)\n    ) {\n      return;\n    }\n\n    console.log('data:', midiEvent.data, 'hex:', midiEvent.data[0].toString(16), midiEvent.data[1].toString(16), midiEvent.data[2].toString(16));\n    const noteOn = (midiEvent.data[0] & 0x90) === 0x90;\n    const noteOff = (midiEvent.data[0] & 0x80) === 0x80;\n\n    if(noteOn && this.fundamentalNoteSet) {\n      this.fundamentalNoteSet = false;\n      this.scale.fundamentalNote = midiEvent.data[1];\n      this.scale.fundamentalFrequency = this.midiToFrequency(midiEvent.data[1]);\n      this.noteDisplay.innerHTML = this.scale.fundamentalNote;\n      this.frequencyDisplay.innerHTML = this.scale.fundamentalFrequency.toFixed(2);\n      this.log('Fundamental note set:', this.scale.fundamentalNote, `(${ this.scale.fundamentalFrequency.toFixed(2)}Hz)`);\n    } else if(noteOn || noteOff) {\n      const [note, pitchbend] = this.scale.noteToNasca(midiEvent.data[1]);\n\n      // Only set pitch bend on Note On message\n      if(noteOn) {\n        const finePitchBend = pitchbend & 127;\n        const coarsePitchBend = (pitchbend >> 7) & 127;\n        const channel = midiEvent.data[0] & 15;\n      // Send channel pitch bend\n        this.outputDevice.send([0xE0 + channel, finePitchBend, coarsePitchBend]);\n      }\n\n      // Replace with computed note\n      this.outputDevice.send([midiEvent.data[0], note, midiEvent.data[2]])\n    } else {\n      this.outputDevice.send(midiEvent.data);\n    }\n  }\n}\n\nexport default MIDIHandler;","import MIDIHandler from './MidiHandler';\n\nconst log = (...message) => {\n  var element = document.getElementById('logs');\n  element.innerHTML += message.join(' ') + '\\n';\n  element.scrollTop = element.scrollHeight;\n}\n\nwindow.onload = () => {\n  window.handler = new MIDIHandler(\n    document.getElementById('input-devices'),\n    document.getElementById('output-devices'),\n    document.getElementById('note'),\n    document.getElementById('frequency'),\n    document.getElementById('set-note'),\n    log\n  );\n}"]}